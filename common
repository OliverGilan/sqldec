#!/usr/bin/env bash

cli_log(){
    script_name=${0##*/}
    timestamp=$(date -u +"%Y-%m-%d%T%H:%M:%SZ")
    echo "== $script_name $timestamp $1"
}

log_conn_options(){
	echo "
    -U --user=user
    -W --password=password
    -p --port=port
       --host=host
    -n --name=name
    -c --config=path/to/config
    -h --help
"
}

parse_options(){
    # Source config file
    configFile="$WORKDIR/sqldec.config"
    if [ -f "$configFile" ]; then
        . "$configFile"
    fi

    # Read command args
	LONGOPTS=user:,password:,port:,name:,config:schema:,help,host:
	OPTIONS=U:W:p:n:c:s:h
	PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
	if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    		# e.g. return value is 1
    		#  then getopt has complained about wrong arguments to stdout
    		exit 2
	fi
	eval set -- "$PARSED"

    # Set defaults based on values in config 
    if [ ! -z "${USERNAME:-}" ]; then U=$USERNAME; else U="postgres"; fi 
    if [ ! -z "${PASSWORD:-}" ]; then W=$PASSWORD; else W=-; fi 
    if [ ! -z "${HOST:-}" ]; then host=$HOST; else host="localhost"; fi 
    if [ ! -z "${PORT:-}" ]; then p=$PORT; else p=5432; fi 
    if [ ! -z "${SCHEMA:-}" ]; then s=$SCHEMA; else s="schema.sql"; fi 
    if [ ! -z "${DATABASE:-}" ]; then n=$DATABASE; else n=-; fi 
    h=n

    # Override config values with command arguments
    shifts=$((0))
    while true; do
        case "$1" in
            -U|--user)
                U="$2"
                if [ -z "${n:-}" ]; then n=$U; fi 
                shifts=$((shifts+2))
                shift 2
                ;;
            -W|--password)
                W="$2"
                shifts=$((shifts+2))
                shift 2
                ;;
            --host)
                host="$2"
                shifts=$((shifts+2))
                shift 2
                ;;
            -p|--port)
                p="$2"
                shifts=$((shifts+2))
                shift 2
                ;;
            -n|--name)
                n="$2"
                shifts=$((shifts+2))
                shift 2
                ;;
            -c|--config)
                c="$2"
                shifts=$((shifts+2))
                shift 2
                ;;
            -h|--help)
                h=y
                shifts=$((shifts+1))
                shift
                ;;
            --)
                shifts=$((shifts+1))
                shift
                break
                ;;
            *)
                echo "Unknown argument $2"
                exit 3
                ;;
        esac
    done

    if [ -z "${n:-}" ]; then n=$U; fi 
    echo "args: $U $W $host $p $s $n $h"
}

require_parameter(){
    if [ -z "${1:-}" ]; 
    then 
        echo "Parameter $2 required"
        exit 1 
    fi 
}

require_argument(){
    if [ -z "${1:-}" ]; 
    then 
        echo "Argument $2 required"
        exit 1 
    fi 
}

connect_to_db(){
    if [ "$( PGPASSWORD=$W psql -U $U -p $p -XtAc "SELECT 1 FROM pg_database WHERE datname='$n'" )" == '1' ]
    then
        echo 0
    else
        echo 1
    fi
}

db_connection_string(){
    if [ -z "${1:-}" ]; then 
        echo "must supply db name"
        exit 1
    fi 
    if [ -z "${W+}" ]; then local pass=""; else local pass=":$W"; fi
    echo "postgresql://$U$pass@$host:$p/$1"
}

dump_schema(){
    if [ -z "${1:-}" ]; then 
        echo "must supply db name"
        exit 1
    fi 
    if [ -z "${W+}" ]; then local pass=""; else local pass=":$W"; fi
    shell $(PGPASSWORD=$W pg_dump --schema-only -h $host -p $p -U $U $1)
}

current_version(){
    echo "$(PGPASSWORD=$W psql -U $U -p $p -XtAc "SELECT current_migration FROM psqldec.version ORDER BY v DESC LIMIT 1;" "$n")"
}

migration_prefix(){
    echo `date +'%Y%m%d%H%M%S'`
}