#!/usr/bin/env bash

# 1. Retrieve latest version from DB
# 2. Apply all migrations between the current version and the specified migration (latest by default)
# 3. Update version in DB

if [ $h = y ]
then
    cli_help_apply
    exit 0
fi

if [ $cp = y ]; then
	require_parameter "${2:-}" "migration_name"
fi

# Ensure connection to DB is possible
if [ $(connect_to_db) == 0 ]
then
    echo "database $n connection established"
else
    echo "could not connect to database"
    exit 0
fi

# Retrieve current version & migrations to apply
# TODO: Cleanup this trash abomination of logic
version=$(current_version)
files=(migrations/*)
migrations_to_apply=()
if [ -z $version ];
then
	echo "first migration"
	if [ $cp = n ] && [ -z "${2:-}" ]
	then
		migrations_to_apply=("${files[@]}")
	elif [ $cp = n ] && [ ! -z "$2" ]
	then
		for f in "${files[@]}"; do
			filename=$(echo "${f}" | cut -d "/" -f 2)
			migrations_to_apply+=("$f")
			if [ "$filename" = "$2" ]; then
				break
			fi
		done
	else
		for f in "${files[@]}"; do
			filename=$(echo "${f}" | cut -d "/" -f 2)
			if [ ! -z "$2" ] && [ "$filename" = "$2" ]; then
				migrations_to_apply+=("$f")
				break
			fi
		done
		if [ "${#migrations_to_apply[@]}" -eq 0 ]; then
			echo "specified migration name does not exist after current version: $version"
			exit 1
		fi
	fi
else
	echo "current version $version"
	currVer=$(echo "${version}" | cut -d "_" -f 1)
	# If not first migration then only take migrations after the current version
	for f in "${files[@]}"; do
		filename=$(echo "${f}" | cut -d "/" -f 2)
		timestamp=$(echo "${filename}" | cut -d "_" -f 1)
		if [ $cp = n ] && [ "$timestamp" -gt "$currVer" ]; then
			migrations_to_apply+=("$f")
		fi
		if [ ! -z "${2:-}" ] && [ "$filename" = "$2" ]; then
			if [ $cp = y ]; then migrations_to_apply+=("$f"); fi
			break
		fi
	done
fi

# Apply migrations
echo "${#migrations_to_apply[@]} migrations to apply"
for m in "${migrations_to_apply[@]}"; do
	echo "applying ${m}"
	migration="$PWD/$m/up.sql"
	PGPASSWORD=$W psql -U $U -p $p -f "$migration" "$n" &>/dev/null
	PGPASSWORD=$W psql -U $U -p $p -f "$migration" "$n-shadow" &>/dev/null
	last="$m"
done

# Update version
lastMigrationName=$(echo "${last}" | cut -d "/" -f 2)
PGPASSWORD=$W psql -U $U -p $p -XtAc "INSERT INTO sqldec.version(current_migration) VALUES('${lastMigrationName}');" "$n"

cli_help_apply(){
	echo "
Usage: sqld [options...] apply [<migration-name>]

Arguments:
	<migration-name>	Optional. Runs specific migration. By default runs all the latest migrations since the latest run.

Options:
	--count n	Run N latest migrations.
	I think the above option should be an argument like <migration-name>|<count>
"
	exit 1
}
